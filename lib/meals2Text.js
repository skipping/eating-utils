// Generated by CoffeeScript 1.7.1
(function() {
  var Meals2Text, colors, document, sprintf;

  require('sugar');

  sprintf = require("sprintf-js").sprintf;

  colors = require('colors');

  module.exports = Meals2Text = (function() {
    function Meals2Text() {}

    Meals2Text.prototype.toConsole = function(meals) {
      var out;
      out = this.createDoc(meals, null, true);
      return console.log(out.text);
    };

    Meals2Text.prototype.toJSON = function(meals) {
      return JSON.stringify(meals);
    };

    Meals2Text.prototype.toTxt = function(meals, title) {
      var out;
      out = this.createDoc(meals, title);
      return out.text;
    };

    Meals2Text.prototype.createDoc = function(meals, title, colours) {
      var calories, day, doc, meal, mealGroups, _i, _len;
      mealGroups = meals != null ? meals.groupBy(function(meal) {
        return meal.date.format('{Weekday} {Month} {dd}, {yyyy}');
      }) : void 0;
      doc = new document;
      if (title) {
        this.writeHeading(doc, meals, title);
      }
      for (day in mealGroups) {
        meals = mealGroups[day];
        doc.addText(day);
        doc.addSection();
        calories = 0;
        for (_i = 0, _len = meals.length; _i < _len; _i++) {
          meal = meals[_i];
          this.meal2Text(doc, meal, colours);
          calories += meal.calories;
        }
        doc.addSection();
        this.writeTotalCalories(doc, calories, colours);
        doc.addNewLine();
      }
      return doc;
    };

    Meals2Text.prototype.writeHeading = function(doc, meals, title) {
      var dateFinish, dateStart;
      dateStart = meals.first().date.format('{Weekday} {Month} {dd}, {yyyy}');
      dateFinish = meals[meals.length - 1].date.format('{Weekday} {Month} {dd}, {yyyy}');
      title = "| " + title + " -- " + dateStart;
      if (dateStart !== dateFinish) {
        title += " - " + dateFinish;
      }
      if (title.length + 2 > doc.lineLength) {
        title += ' |';
        doc.lineLength = title.length;
      } else {
        title += sprintf('%' + (doc.lineLength - title.length) + 's', ' |');
      }
      doc.addTitleSection();
      doc.addLine(title);
      doc.addTitleSection();
      doc.addNewLine();
      return doc.addNewLine();
    };

    Meals2Text.prototype.writeTotalCalories = function(doc, calories, colours) {
      var cals, maxCalorieLength;
      maxCalorieLength = 7;
      cals = sprintf('%' + (doc.lineLength - maxCalorieLength) + 's cals', calories);
      if (colours) {
        cals = cals.green;
      }
      return doc.addLine(cals);
    };

    Meals2Text.prototype.meal2Text = function(doc, meal, colours) {
      var foodPad, foodcals, mealStr, spacer, time;
      if (meal._id) {
        mealStr = sprintf('%2s| ', meal._id);
        if (colours) {
          mealStr = mealStr.grey;
        }
      } else {
        mealStr = sprintf('   ') + " ";
      }
      spacer = ' | ';
      time = meal.date.format('{hh}:{mm}{tt}');
      foodPad = doc.lineLength - time.length - spacer.length * 2 - 6 - 9;
      foodcals = sprintf('%6s' + spacer + '%-' + foodPad + 's' + spacer + '%4s cals', time, meal.foods, meal.calories);
      if (meal.important) {
        foodcals += " *";
        if (colours) {
          foodcals = foodcals.yellow;
        }
      }
      mealStr += foodcals;
      return doc.addLine(mealStr);
    };

    return Meals2Text;

  })();

  document = (function() {
    function document(lineLength) {
      this.lineLength = lineLength || 64;
      this.text = '';
    }

    document.prototype.addText = function(text) {
      this.text = this.text.concat(text);
      return this;
    };

    document.prototype.addNewLine = function() {
      this.text = this.text.concat('\n');
      return this;
    };

    document.prototype.addLine = function(text) {
      this.text = this.text.concat('\n', text);
      return this;
    };

    document.prototype.addTitleSection = function(text) {
      return this.addLine(Array(this.lineLength + 1).join('='));
    };

    document.prototype.addSection = function() {
      this.addLine(Array(this.lineLength + 1).join('-'));
      return this;
    };

    return document;

  })();

}).call(this);
