// Generated by CoffeeScript 1.7.1
(function() {
  var DateParser;

  require('sugar');

  module.exports = DateParser = (function() {
    function DateParser(locale) {
      if (locale) {
        Date.setLocale(locale);
      }
      this.relativeDate = null;
      this.excludedCommonFractionsRe = "(?![1-2]\\/3\\s|[1,3]\\/4\\s|1\\/2\\s)";
      this.dateRe = "\\d{1,2}(?:\\/|\\-)\\d{1,2}(?:(?:\\/|\\-)\\d{2,4})?(?:\\s|\\b)";
      this.dayRe = "(?:^|\\s)(?:(?:(?:[0-2]\\d{1})|(?:[3][01]{1})|([0-9])))(?![\\d])(?:st|nd|rd|th)?";
      this.monthRe = "(?:^|\\s)((?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Sept|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?))";
      this.yearRe = "(?:^|\\s)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])";
      this.dmyRe = new RegExp(this.dayRe + this.monthRe + this.yearRe, ["i"]);
      this.dmRe = new RegExp(this.dayRe + this.monthRe, ["i"]);
      this.mdyRe = new RegExp(this.monthRe + this.dayRe + this.yearRe, ["i"]);
      this.mdRe = new RegExp(this.monthRe + this.dayRe, ["i"]);
      this.dateWordsRe = new RegExp("today|tomorrow|yesterday", "i");
      this.timeRe = new RegExp("(?:(?:0{0,1}[1-9]|1[0-2])(?::|\\.)[0-5][0-9](?:(?::|\\.)[0-5][0-9]){0,1}\\ {0,1}[aApP][mM])|(?:(?:0{0,1}[0-9]|1[0-9]|2[0-3])(?::|\\.)[0-5][0-9](?:(?::|\\.)[0-5][0-9]){1})|(?:(?:0{0,1}[1-9]|1[0-2]){1}[aApP][mM])");
      this.timeAgoRe = new RegExp("(?:\\d{1,2}\\s?|an?\\s)(?:(?:ho?u?r?s?)|(?:min(ute)?s?)|(?:day?s?))(?:\\sago)");
    }

    DateParser.prototype.setDateLocale = function(locale) {
      return Date.setLocale(locale);
    };

    DateParser.prototype.setRelativeDate = function(date) {
      return this.relativeDate = date;
    };

    DateParser.prototype.dateWords = function(text) {
      return this.getText(this.dateWordsRe.exec(text));
    };

    DateParser.prototype.ddmmyy = function(text, excludeCommonFractions) {
      var ddmmyyRe;
      if (excludeCommonFractions) {
        ddmmyyRe = new RegExp(this.excludedCommonFractionsRe + this.dateRe);
      } else {
        ddmmyyRe = new RegExp(this.dateRe);
      }
      return this.getText(ddmmyyRe.exec(text));
    };

    DateParser.prototype.dmy = function(text) {
      return this.getText(this.dmyRe.exec(text));
    };

    DateParser.prototype.mdy = function(text) {
      return this.getText(this.mdyRe.exec(text));
    };

    DateParser.prototype.md = function(text) {
      return this.getText(this.mdRe.exec(text));
    };

    DateParser.prototype.dm = function(text) {
      return this.getText(this.dmRe.exec(text));
    };

    DateParser.prototype.time = function(text) {
      return this.getText(this.timeRe.exec(text));
    };

    DateParser.prototype.timeAgo = function(text) {
      return this.getText(this.timeAgoRe.exec(text));
    };

    DateParser.prototype.getText = function(match) {
      if ((match != null ? match.length : void 0) > 0) {
        return match[0].trim();
      } else {
        return null;
      }
    };

    DateParser.prototype.parseDate = function(text, excludeCommonFractions) {
      return this.dateWords(text) || this.ddmmyy(text, excludeCommonFractions) || this.dmy(text) || this.mdy(text) || this.md(text) || this.dm(text);
    };

    DateParser.prototype.parseTime = function(text) {
      return this.time(text) || this.timeAgo(text);
    };

    DateParser.prototype.cleanTime = function(timeStr) {
      timeStr = timeStr.replace("hr", "hour");
      timeStr = timeStr.replace("hrs", "hours");
      timeStr = timeStr.replace("mins", "minutes");
      return timeStr = timeStr.replace('.', ':');
    };

    DateParser.prototype.cleanDate = function(dateStr) {
      var r;
      r = /[\d]+(st|nd|rd|th)/gi;
      return dateStr.replace(r, function(a, b) {
        return a.replace(b, '');
      });
    };

    DateParser.prototype.parseStringToDateAndTime = function(text, excludeCommonFractions) {
      var dateStr, timeStr;
      dateStr = this.parseDate(text, excludeCommonFractions);
      text = text.replace(dateStr, '');
      timeStr = this.dateParser.parseTime(text);
      return this.parseDateAndTimeToDate(dateStr, timeStr);
    };

    DateParser.prototype.parseDateAndTimeToDate = function(dateStr, timeStr) {
      var date, str;
      if (dateStr) {
        dateStr = this.cleanDate(dateStr);
      }
      if (timeStr) {
        timeStr = this.cleanTime(timeStr);
      }
      if (!dateStr && this.relativeDate) {
        dateStr = this.relativeDate.short();
      }
      str = null;
      if (dateStr && timeStr) {
        str = dateStr + ' ' + timeStr;
      } else if (dateStr) {
        str = dateStr;
      } else if (timeStr) {
        str = timeStr;
      }
      date = Date.create(str);
      return date;
    };

    return DateParser;

  })();

}).call(this);
